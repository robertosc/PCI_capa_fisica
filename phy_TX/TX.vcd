$date
	Tue Sep 22 00:56:18 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module BancoPrubas_PHY $end
$var wire 1 ! valid_out_0 $end
$var wire 1 " valid_out_1 $end
$var wire 1 # valid_out1 $end
$var wire 1 $ valid_out0 $end
$var wire 1 % valid $end
$var wire 1 & reset $end
$var wire 8 ' data_out_1 [7:0] $end
$var wire 8 ( data_out_0 [7:0] $end
$var wire 32 ) data_input [31:0] $end
$var wire 1 * clk_f $end
$var wire 1 + clk_4f $end
$var wire 1 , clk_2f $end
$var wire 1 - active $end
$scope module PHY_TX $end
$var wire 1 # valid_out1 $end
$var wire 1 $ valid_out0 $end
$var wire 1 . valid_out $end
$var wire 1 / valid_demux_striping_1 $end
$var wire 1 0 valid_demux_striping_0 $end
$var wire 1 % valid $end
$var wire 1 & reset $end
$var wire 32 1 lane_1 [31:0] $end
$var wire 32 2 lane_0 [31:0] $end
$var wire 32 3 demux_1_probador [31:0] $end
$var wire 32 4 demux_0 [31:0] $end
$var wire 8 5 data_out_1 [7:0] $end
$var wire 8 6 data_out_0 [7:0] $end
$var wire 32 7 data_input [31:0] $end
$var wire 1 * clk_f $end
$var wire 1 + clk_4f $end
$var wire 1 , clk_2f $end
$var wire 1 - active $end
$scope module demux_lane_0 $end
$var wire 1 0 valid_0 $end
$var wire 1 & reset $end
$var wire 32 8 lane_0 [31:0] $end
$var wire 1 + clk_4f $end
$var reg 2 9 counter1 [1:0] $end
$var reg 8 : data_out [7:0] $end
$var reg 1 $ valid_out $end
$upscope $end
$scope module demux_lane_1 $end
$var wire 1 / valid_0 $end
$var wire 1 & reset $end
$var wire 32 ; lane_0 [31:0] $end
$var wire 1 + clk_4f $end
$var reg 2 < counter1 [1:0] $end
$var reg 8 = data_out [7:0] $end
$var reg 1 # valid_out $end
$upscope $end
$scope module recirculador_inicial $end
$var wire 1 % valid $end
$var wire 32 > data_input [31:0] $end
$var wire 1 , clk_2f $end
$var wire 1 - active $end
$var reg 32 ? demux_0 [31:0] $end
$var reg 32 @ demux_1_probador [31:0] $end
$var reg 1 . valid_out $end
$upscope $end
$scope module u_demux_striping $end
$var wire 32 A data_input [31:0] $end
$var wire 1 . valid_in $end
$var wire 1 & reset $end
$var wire 1 , clk_2f $end
$var reg 32 B lane_0 [31:0] $end
$var reg 32 C lane_1 [31:0] $end
$var reg 1 D sel $end
$var reg 1 0 valid_out0 $end
$var reg 1 / valid_out1 $end
$upscope $end
$upscope $end
$scope module u_probador $end
$var wire 8 E data_out_0 [7:0] $end
$var wire 8 F data_out_1 [7:0] $end
$var wire 1 ! valid_0 $end
$var wire 1 " valid_1 $end
$var reg 1 - active $end
$var reg 1 , clk_2f $end
$var reg 1 + clk_4f $end
$var reg 1 * clk_f $end
$var reg 32 G data_input [31:0] $end
$var reg 1 & reset $end
$var reg 1 % valid $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b11111111111111111110111011101110 G
bx F
bx E
0D
bx C
bx B
bx A
b0 @
bx ?
b11111111111111111110111011101110 >
bx =
b0 <
bx ;
bx :
b0 9
bx 8
b11111111111111111110111011101110 7
bx 6
bx 5
bx 4
b0 3
bx 2
bx 1
x0
x/
0.
1-
1,
1+
1*
b11111111111111111110111011101110 )
bx (
bx '
0&
1%
0$
0#
z"
z!
$end
#1
0+
#2
1+
0,
#3
0+
#4
b11111111111011101110111011101110 )
b11111111111011101110111011101110 7
b11111111111011101110111011101110 >
b11111111111011101110111011101110 G
1&
00
1D
1.
b11111111111111111110111011101110 4
b11111111111111111110111011101110 ?
b11111111111111111110111011101110 A
1+
1,
0*
#5
0+
#6
1+
0,
#7
0+
#8
b11111111111011101110111011101110 4
b11111111111011101110111011101110 ?
b11111111111011101110111011101110 A
1/
0D
b11111111111111111110111011101110 1
b11111111111111111110111011101110 ;
b11111111111111111110111011101110 C
1+
1,
1*
#9
0+
#10
b1 <
1#
b11111111 '
b11111111 5
b11111111 =
b11111111 F
1+
0,
#11
0+
#12
b10 <
b11001100111011101110111011101110 )
b11001100111011101110111011101110 7
b11001100111011101110111011101110 >
b11001100111011101110111011101110 G
10
1D
b11111111111011101110111011101110 2
b11111111111011101110111011101110 8
b11111111111011101110111011101110 B
1+
1,
0*
#13
0+
#14
b11 <
b11101110 '
b11101110 5
b11101110 =
b11101110 F
b1 9
1$
b11111111 (
b11111111 6
b11111111 :
b11111111 E
1+
0,
#15
0+
#16
b10 9
b11101110 (
b11101110 6
b11101110 :
b11101110 E
b0 <
b11001100111011101110111011101110 4
b11001100111011101110111011101110 ?
b11001100111011101110111011101110 A
0D
b11111111111011101110111011101110 1
b11111111111011101110111011101110 ;
b11111111111011101110111011101110 C
b10101010101010100001001000110100 )
b10101010101010100001001000110100 7
b10101010101010100001001000110100 >
b10101010101010100001001000110100 G
1+
1,
1*
#17
0+
#18
b1 <
b11111111 '
b11111111 5
b11111111 =
b11111111 F
b11 9
1+
0,
#19
0+
#20
b0 9
b10 <
b11101110 '
b11101110 5
b11101110 =
b11101110 F
b10010001101000101011001111000 )
b10010001101000101011001111000 7
b10010001101000101011001111000 >
b10010001101000101011001111000 G
1D
b11001100111011101110111011101110 2
b11001100111011101110111011101110 8
b11001100111011101110111011101110 B
b10101010101010100001001000110100 4
b10101010101010100001001000110100 ?
b10101010101010100001001000110100 A
1+
1,
0*
#21
0+
#22
b11 <
b1 9
b11001100 (
b11001100 6
b11001100 :
b11001100 E
1+
0,
#23
0+
#24
b10 9
b11101110 (
b11101110 6
b11101110 :
b11101110 E
b0 <
b10010001101000101011001111000 4
b10010001101000101011001111000 ?
b10010001101000101011001111000 A
0D
b10101010101010100001001000110100 1
b10101010101010100001001000110100 ;
b10101010101010100001001000110100 C
b10111011101110111010101010101010 )
b10111011101110111010101010101010 7
b10111011101110111010101010101010 >
b10111011101110111010101010101010 G
1+
1,
1*
#25
0+
#26
b1 <
b10101010 '
b10101010 5
b10101010 =
b10101010 F
b11 9
1+
0,
#27
0+
#28
b0 9
b10 <
1D
b10010001101000101011001111000 2
b10010001101000101011001111000 8
b10010001101000101011001111000 B
b10111011101110111010101010101010 4
b10111011101110111010101010101010 ?
b10111011101110111010101010101010 A
1+
1,
0*
#29
0+
#30
b11 <
b10010 '
b10010 5
b10010 =
b10010 F
b1 9
b10010 (
b10010 6
b10010 :
b10010 E
1+
0,
#31
0+
#32
b10 9
b110100 (
b110100 6
b110100 :
b110100 E
b0 <
b110100 '
b110100 5
b110100 =
b110100 F
0D
b10111011101110111010101010101010 1
b10111011101110111010101010101010 ;
b10111011101110111010101010101010 C
1+
1,
1*
