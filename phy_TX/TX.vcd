$date
	Tue Sep 22 01:05:36 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module BancoPrubas_PHY $end
$var wire 1 ! valid_out1 $end
$var wire 1 " valid_out0 $end
$var wire 1 # valid $end
$var wire 1 $ reset $end
$var wire 8 % data_out_1 [7:0] $end
$var wire 8 & data_out_0 [7:0] $end
$var wire 32 ' data_input [31:0] $end
$var wire 1 ( clk_f $end
$var wire 1 ) clk_4f $end
$var wire 1 * clk_2f $end
$var wire 1 + active $end
$scope module PHY_TX $end
$var wire 1 ! valid_out1 $end
$var wire 1 " valid_out0 $end
$var wire 1 , valid_out $end
$var wire 1 - valid_demux_striping_1 $end
$var wire 1 . valid_demux_striping_0 $end
$var wire 1 # valid $end
$var wire 1 $ reset $end
$var wire 32 / lane_1 [31:0] $end
$var wire 32 0 lane_0 [31:0] $end
$var wire 32 1 demux_1_probador [31:0] $end
$var wire 32 2 demux_0 [31:0] $end
$var wire 8 3 data_out_1 [7:0] $end
$var wire 8 4 data_out_0 [7:0] $end
$var wire 32 5 data_input [31:0] $end
$var wire 1 ( clk_f $end
$var wire 1 ) clk_4f $end
$var wire 1 * clk_2f $end
$var wire 1 + active $end
$scope module demux_lane_0 $end
$var wire 1 . valid_0 $end
$var wire 1 $ reset $end
$var wire 32 6 lane_0 [31:0] $end
$var wire 1 ) clk_4f $end
$var reg 2 7 counter1 [1:0] $end
$var reg 8 8 data_out [7:0] $end
$var reg 1 " valid_out $end
$upscope $end
$scope module demux_lane_1 $end
$var wire 1 - valid_0 $end
$var wire 1 $ reset $end
$var wire 32 9 lane_0 [31:0] $end
$var wire 1 ) clk_4f $end
$var reg 2 : counter1 [1:0] $end
$var reg 8 ; data_out [7:0] $end
$var reg 1 ! valid_out $end
$upscope $end
$scope module recirculador_inicial $end
$var wire 1 # valid $end
$var wire 32 < data_input [31:0] $end
$var wire 1 * clk_2f $end
$var wire 1 + active $end
$var reg 32 = demux_0 [31:0] $end
$var reg 32 > demux_1_probador [31:0] $end
$var reg 1 , valid_out $end
$upscope $end
$scope module u_demux_striping $end
$var wire 32 ? data_input [31:0] $end
$var wire 1 , valid_in $end
$var wire 1 $ reset $end
$var wire 1 * clk_2f $end
$var reg 32 @ lane_0 [31:0] $end
$var reg 32 A lane_1 [31:0] $end
$var reg 1 B sel $end
$var reg 1 . valid_out0 $end
$var reg 1 - valid_out1 $end
$upscope $end
$upscope $end
$scope module u_probador $end
$var wire 8 C data_out_0 [7:0] $end
$var wire 8 D data_out_1 [7:0] $end
$var wire 1 " valid_0 $end
$var wire 1 ! valid_1 $end
$var reg 1 + active $end
$var reg 1 * clk_2f $end
$var reg 1 ) clk_4f $end
$var reg 1 ( clk_f $end
$var reg 32 E data_input [31:0] $end
$var reg 1 $ reset $end
$var reg 1 # valid $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b11111111111111111110111011101110 E
bx D
bx C
0B
bx A
bx @
bx ?
b0 >
bx =
b11111111111111111110111011101110 <
bx ;
b0 :
bx 9
bx 8
b0 7
bx 6
b11111111111111111110111011101110 5
bx 4
bx 3
bx 2
b0 1
bx 0
bx /
x.
x-
0,
1+
1*
1)
1(
b11111111111111111110111011101110 '
bx &
bx %
0$
1#
0"
0!
$end
#1
0)
#2
1)
0*
#3
0)
#4
b11111111111011101110111011101110 '
b11111111111011101110111011101110 5
b11111111111011101110111011101110 <
b11111111111011101110111011101110 E
1$
1,
b11111111111111111110111011101110 2
b11111111111111111110111011101110 =
b11111111111111111110111011101110 ?
1)
1*
0(
#5
0)
#6
1)
0*
#7
0)
#8
b11111111111011101110111011101110 2
b11111111111011101110111011101110 =
b11111111111011101110111011101110 ?
1.
1B
b11111111111111111110111011101110 0
b11111111111111111110111011101110 6
b11111111111111111110111011101110 @
1)
1*
1(
#9
0)
#10
b1 7
1"
b11111111 &
b11111111 4
b11111111 8
b11111111 C
1)
0*
#11
0)
#12
b10 7
b11001100111011101110111011101110 '
b11001100111011101110111011101110 5
b11001100111011101110111011101110 <
b11001100111011101110111011101110 E
1-
0B
b11111111111011101110111011101110 /
b11111111111011101110111011101110 9
b11111111111011101110111011101110 A
1)
1*
0(
#13
0)
#14
b1 :
1!
b11111111 %
b11111111 3
b11111111 ;
b11111111 D
b11 7
b11101110 &
b11101110 4
b11101110 8
b11101110 C
1)
0*
#15
0)
#16
b0 7
b10 :
b11101110 %
b11101110 3
b11101110 ;
b11101110 D
b11001100111011101110111011101110 2
b11001100111011101110111011101110 =
b11001100111011101110111011101110 ?
1B
b11111111111011101110111011101110 0
b11111111111011101110111011101110 6
b11111111111011101110111011101110 @
b10101010101010100001001000110100 '
b10101010101010100001001000110100 5
b10101010101010100001001000110100 <
b10101010101010100001001000110100 E
1)
1*
1(
#17
0)
#18
b11 :
b1 7
b11111111 &
b11111111 4
b11111111 8
b11111111 C
1)
0*
#19
0)
#20
b10 7
b11101110 &
b11101110 4
b11101110 8
b11101110 C
b0 :
b10010001101000101011001111000 '
b10010001101000101011001111000 5
b10010001101000101011001111000 <
b10010001101000101011001111000 E
0B
b11001100111011101110111011101110 /
b11001100111011101110111011101110 9
b11001100111011101110111011101110 A
b10101010101010100001001000110100 2
b10101010101010100001001000110100 =
b10101010101010100001001000110100 ?
1)
1*
0(
#21
0)
#22
b1 :
b11001100 %
b11001100 3
b11001100 ;
b11001100 D
b11 7
1)
0*
#23
0)
#24
b0 7
b10 :
b11101110 %
b11101110 3
b11101110 ;
b11101110 D
b10010001101000101011001111000 2
b10010001101000101011001111000 =
b10010001101000101011001111000 ?
1B
b10101010101010100001001000110100 0
b10101010101010100001001000110100 6
b10101010101010100001001000110100 @
b10111011101110111010101010101010 '
b10111011101110111010101010101010 5
b10111011101110111010101010101010 <
b10111011101110111010101010101010 E
1)
1*
1(
#25
0)
#26
b11 :
b1 7
b10101010 &
b10101010 4
b10101010 8
b10101010 C
1)
0*
#27
0)
#28
b10 7
b0 :
0B
b10010001101000101011001111000 /
b10010001101000101011001111000 9
b10010001101000101011001111000 A
b10111011101110111010101010101010 2
b10111011101110111010101010101010 =
b10111011101110111010101010101010 ?
1)
1*
0(
#29
0)
#30
b1 :
b10010 %
b10010 3
b10010 ;
b10010 D
b11 7
b10010 &
b10010 4
b10010 8
b10010 C
1)
0*
#31
0)
#32
b0 7
b110100 &
b110100 4
b110100 8
b110100 C
b10 :
b110100 %
b110100 3
b110100 ;
b110100 D
1B
b10111011101110111010101010101010 0
b10111011101110111010101010101010 6
b10111011101110111010101010101010 @
1)
1*
1(
